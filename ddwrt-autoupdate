#!/bin/bash

set -euo pipefail

manual_tag="${1:-}"

server_https="https://download1.dd-wrt.com/dd-wrtv2/downloads/betas"

stop() {
    echo "$@"
    echo
    exit
}

error() {
    >&2 echo "Error:" "$@"
    exit 1
}

list_files() {
    local url="$1"
    curl -Lfs "$url" | sed -n 's/^<a href="\([^/"]*\)\/">\1\/<\/a>.*$/\1/p'
}

get_latest_releases() {

    local year=$( list_files "$server_https" | tail -n1 )
    [[ "$year" =~ ^[0-9]{4}$ ]] || error "Unexpected directory: $year"
    (( $year >= 2019 )) || error "Unexpected year: $year"

    exec 11< <( list_files "$server_https/$(( $year - 1 ))" )
    exec 10< <( list_files "$server_https/$(( $year - 0 ))" )
    local ym1=$( cat <&11 )
    local ym0=$( cat <&10 )

    for y in "$ym1" "$ym0"; do
        [[ "$y" != "" ]] || error "Unable to list latest releases"
        cat <<<"$y"
    done

}

echo

if [[ "$manual_tag" == "" ]]; then
    echo "Getting info of latest DD-WRT releases..."
    latest_releases=$( get_latest_releases )
    release_tag=$( { echo; echo "$latest_releases"; } | tail -n$(( $prior_to_latest + 1 )) | head -n1 )
    [[ "$release_tag" != "" ]] || error "Chosen prior-to-latest release cannot be from before last year"
else
    release_tag="$manual_tag"
fi

[[ "$release_tag" =~ ^((0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[0-1])[-](2[0-9][0-9][0-9]))[-]r([0-9]+)$ ]] || error "Unexpected release tag: $release_tag"

year="${BASH_REMATCH[4]}"
month="${BASH_REMATCH[2]}"
day="${BASH_REMATCH[3]}"

date_US="${BASH_REMATCH[1]}"
date_int="$year-$month-$day"
date_num="$year$month$day"

release_num="${BASH_REMATCH[5]}"

tag="r$release_num-$date_num"

if [[ "$manual_tag" == "" ]]; then
    echo "Chosen release ($prior_to_latest prior to latest): r$release_num ($date_int)"
else
    echo "Chosen release (manual): r$release_num ($date_int)"
    tag="${tag}_$( date '+%Y-%m-%d_%H-%M-%S' )"
fi

echo

set_firmware_files

mkdir -p "$local_repo"
cd "$local_repo"

tmp='.tmp'
rm -rf "$tmp"

echo "Device: $device_name"
[[ ! -e "$tag" ]] || stop "Release 'r$release_num' already processed"

mkdir "$tmp"
cd "$tmp"

echo "Backing up device configuration..."
curl -LfsJO -u "$device_credentials" $device_https_config "$device_address/nvrambak.bin"

if declare -F on_device_backup &>/dev/null; then on_device_backup; fi
echo

echo "Downloading firmware..."
curl -Lf# -o "$local_firmware_file" "$server_https/$year/$release_tag/$remote_firmware_file"

# Check header (disabled because firmwares for different routers use different headers):
# [[ "$(head -c4 "$local_firmware_file")" == "HDR0" ]] || error "Firmware header check failed"
# TODO: Check file length against header.

# Ensure firmware is at least 1 MiB in size:
(( "$(stat --printf '%s' "$local_firmware_file")" >= (1 * 1024 * 1024) )) || error "Firmware size check failed"

echo

cd ..
[[ ! -e "$tag" ]] || error "Unexpected directory creation: $tag"
mv "$tmp" "$tag"
cd "$tag"

echo "Updating firmware..."
curl -Lf# -u "$device_credentials" -H "Referer: $device_address/Upgrade.asp" -F "erase=0" -F "file=@$local_firmware_file" $device_https_config "$device_address/upgrade.cgi" >/dev/null
echo

if [[ "$ping_device" == "yes" ]]; then

    echo "Waiting 30 seconds..."
    sleep 30
    echo

    echo "Pinging device..."
    until curl -Lfs -u "$device_credentials" $device_https_config "$device_address/nvrambak.bin" >/dev/null
    do
        echo -n "."
        sleep 1
    done
    echo "OK"
    echo

else

    echo "Done"
    echo

fi
